{{ if and .IsBaseType .IsExported }}type {{ pascalize .Name }} interface {
  {{if and (not .IsInterface) (or .Required .HasValidations) }}runtime.Validatable{{ end }}
  {{ range .AllOf }}
  {{ if .IsAnonymous }}{{ range .Properties }}
  {{ if $.IsTuple }}{{ template "tuplefieldIface" . }}{{ else }}{{template "structfieldIface" . }}{{ end }}
  {{ end }}{{ if .HasAdditionalProperties }}{{ if .AdditionalProperties }}/* {{ template "docstring" .AdditionalProperties }}{{ template "propertyValidationDocString" .AdditionalProperties}} */
  {{ pascalize .AdditionalProperties.Name }}() map[string]{{ template "schemaType" .AdditionalProperties }}  {{end}}{{ end}}
  {{ if .AdditionalItems }}/* {{ template "docstring" .AdditionalItems }}{{ template "propertyValidationDocString" .AdditionalItems}} */
  {{ pascalize .AdditionalItems.Name }}() []{{ template "schemaType" .AdditionalItems }}
  {{ end }}
  {{ else }}
  {{ .GoType }}{{ end }}
  {{ end }}
  {{range .Properties}}
  {{ if $.IsTuple }}{{ template "tuplefieldIface" . }}{{ else }}{{template "structfieldIface" . }}{{ end }}
  {{end}}
  {{ if .HasAdditionalProperties }}{{ if .AdditionalProperties }}/* {{ template "docstring" .AdditionalProperties }}{{ template "propertyValidationDocString" .AdditionalProperties}} */
  {{ pascalize .AdditionalProperties.Name }}() map[string]{{ template "schemaType" .AdditionalProperties }}
  {{ end }}{{ end }}
  {{ if .AdditionalItems }}/* {{ template "docstring" .AdditionalItems }}{{ template "propertyValidationDocString" .AdditionalItems}} */
  {{ pascalize .AdditionalItems.Name }}() []{{ template "schemaType" .AdditionalItems }}
  {{ end }}
}

// Unmarshal{{ pascalize .Name }}Slice unmarshals polymorphic slices of {{ pascalize .Name }}
func Unmarshal{{ pascalize .Name }}Slice(reader io.Reader, consumer runtime.Consumer) ([]{{ pascalize .Name }}, error) {
  var elements [][]byte
  if err := consumer.Consume(reader, &elements); err != nil {
    return nil, err
  }

  var result []{{ pascalize .Name }}
  for _, element := range elements {
    obj, err := unmarshal{{ pascalize .Name }}(element, consumer)
    if err != nil {
      return nil, err
    }
    result = append(result, obj)
  }
  return  result, nil
}


// Unmarshal{{ pascalize .Name }} unmarshals polymorphic {{ pascalize .Name }}
func Unmarshal{{ pascalize .Name }}(reader io.Reader, consumer runtime.Consumer) ({{ pascalize .Name }}, error) {
  // we need to read this twice, so first into a buffer
  data, err := ioutil.ReadAll(reader)
  if err != nil {
    return nil, err
  }
  return  unmarshal{{ pascalize .Name }}(data, consumer)
}

func unmarshal{{ pascalize .Name }}(data []byte, consumer runtime.Consumer) ({{ pascalize .Name }}, error) {
  buf := bytes.NewBuffer(data)
  buf2 := bytes.NewBuffer(data)

  // the first time this is read is to fetch the value of the {{ .DiscriminatorField }} property.
  var getType struct { {{ pascalize .DiscriminatorField }} string `json:{{ printf "%q" .DiscriminatorField }}` }
  if err := consumer.Consume(buf, &getType); err != nil {
    return nil, err
  }

  if err := validate.RequiredString({{ printf "%q" .DiscriminatorField }}, "body", getType.{{ pascalize .DiscriminatorField }}); err != nil {
    return nil, err
  }

  // The value of {{ .DiscriminatorField }} is used to determine which type to create and unmarshal the data into
  switch getType.{{ pascalize .DiscriminatorField }} { {{ range $k, $v := .Discriminates }}
    case {{ printf "%q" $k }}:
      var result {{ $v }}
      if err := consumer.Consume(buf2, &result); err != nil {
        return nil, err
      }
      return &result, nil
    {{ end }}
  }
  return nil, errors.New(422, "invalid {{ .DiscriminatorField }} value: %q", getType.{{ pascalize .DiscriminatorField }})

}
{{ else }}{{ if or .IsComplexObject .IsTuple .IsAdditionalProperties }}{{ if .Name }}const ( {{ $structName := (pascalize .Name) }}
  {{ range $index, $prop := .AllOf }}{{ if or (and $.IsSubType .IsBaseType .IsExported) .IsAnonymous }}{{ range .Properties }}is{{ $structName }}_AllOf{{ $index }}Field{{ pascalize .Name }}Nullable bool = {{ .IsNullable }}
  {{ end }}{{ end }}{{ if .AdditionalProperties }}is{{ $structName }}_AllOf{{ $index }}Field{{  pascalize .AdditionalProperties.Name  }}Nullable = {{ .AdditionalProperties.IsNullable }}
  {{ end }}{{ if .AdditionalItems }}is{{ $structName }}_AllOf{{ $index }}Field{{  pascalize .AdditionalItems.Name  }}Nullable = {{ .AdditionalItems.IsNullable }}
  {{ end }}{{ end }}{{ range .Properties }}is{{ $structName }}_Field{{ pascalize .Name }}Nullable bool = {{ .IsNullable }}
  {{ end }}{{ if .AdditionalProperties }}is{{ $structName }}_Field{{  pascalize .AdditionalProperties.Name  }}Nullable = {{ .AdditionalProperties.IsNullable }}
  {{ end }}{{ if .AdditionalItems }}is{{ $structName }}_Field{{  pascalize .AdditionalItems.Name  }}Nullable = {{ .AdditionalItems.IsNullable }}
  {{ end }}
)

func New{{ pascalize .Name }}() *{{ pascalize .Name }} {
  return &{{ pascalize .Name }}{
    {{ range $index, $prop := .AllOf }}{{ if or (and $.IsSubType .IsBaseType .IsExported) .IsAnonymous }}{{ range .Properties }}{{ if and .Default (ne $.DiscriminatorField .Name) }}{{ if or (not $.IsExported) (and $.IsSubType .IsBaseType) }}{{ camelize .Name}}Field{{ else }}{{ pascalize .Name}}{{ end}}: {{ printf "%#v" .Default }},
    {{ end }}{{ end }}{{ end }}{{ if .AdditionalProperties }}{{ if .AdditionalProperties.Default }}{{ pascalize .AdditionalProperties.Name }}: {{ printf "%#v" .AdditionalProperties.Default }},
    {{ end }}{{ end }}{{ if .AdditionalItems }}{{ if .AdditionalItems.Default }}{{ pascalize .AdditionalItems.Name }}: {{ printf "%#v" .AdditionalItems.Default }},
    {{ end }}{{ end }}{{ end }}{{ range .Properties }}{{ if and .Default (ne $.DiscriminatorField .Name) }}{{ if or (not $.IsExported) (and $.IsSubType .IsBaseType) }}{{ camelize .Name}}Field{{ else }}{{ pascalize .Name}}{{ end}}: {{ printf "%#v" .Default }},
    {{ end }}{{ end }}{{ if .AdditionalProperties }}{{ if .AdditionalProperties.Default }}{{ pascalize .AdditionalProperties.Name }}: {{ printf "%#v" .AdditionalProperties.Default }},
    {{ end }}{{ end }}{{ if .AdditionalItems }}{{ if .AdditionalItems.Default }}{{ pascalize .AdditionalItems.Name }}: {{ printf "%#v" .AdditionalItems.Default }},
    {{ end }}{{ end }}
  }
}

type {{ if not .IsExported }}{{ .Name }}{{ else }}{{ pascalize .Name }}{{ end }} {{ end }}{{ template "schemaBody" . }}
{{ else }}type {{ pascalize .Name }} {{ template "typeSchemaType" . }}
{{ end }}
{{ if .IsSubType }}{{ range .AllOf }}
{{ range .Properties }}
{{ if .IsBaseType }}func ({{$.ReceiverName}} *{{ pascalize $.Name}}) {{ pascalize .Name }}() {{ template "schemaType" . }}{
  {{ if eq $.DiscriminatorField .Name }}return {{ printf "%q" $.DiscriminatorValue }}{{ else }}return {{ $.ReceiverName }}.{{camelize .Name}}Field{{end}}
}
func ({{$.ReceiverName}} *{{ pascalize $.Name}}) Set{{ pascalize .Name}}(val {{ template "schemaType" . }}) {
  {{ if ne $.DiscriminatorField .Name }}{{ $.ReceiverName }}.{{camelize .Name}}Field = val{{end}}
}
{{ end }}{{ end }}{{ end }}{{ if .HasAdditionalProperties }}{{ if .AdditionalProperties }}/* {{ template "docstring" .AdditionalProperties }}{{ template "propertyValidationDocString" .AdditionalProperties}} */
{{ pascalize .AdditionalProperties.Name }}() map[string]{{ template "schemaType" .AdditionalProperties }}{{end}}{{ end }}
{{ if .AdditionalItems }}/* {{ template "docstring" .AdditionalItems }}{{ template "propertyValidationDocString" .AdditionalItems}} */
{{ pascalize .AdditionalItems.Name }}() []{{ template "schemaType" .AdditionalItems }}
{{ end }}{{ end }}{{ template "modelSerializer" . }}{{ if .IncludeValidator }}{{if and (not .IsInterface) (not .IsBaseType) (or .Required .HasValidations .HasBaseType) }}
{{ template "schemavalidator" . }}
{{ else if gt (len .AllOf) 0 }}
{{ template "schemavalidator" . }}
{{ else if not (or .IsInterface .IsStream) }}// Validate validates this {{ humanize .Name }}
func ({{.ReceiverName}} {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ if not .IsExported }}{{ .Name }}{{ else }}{{ pascalize .Name }}{{ end }}) Validate(formats strfmt.Registry) error {
  return nil
}{{ end }}{{ end }}{{ end }}
{{ if or .IsComplexObject .IsTuple .IsAdditionalProperties }}{{ if .Name }}{{ range .Properties }}
func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Flag{{ pascalize .Name}}Set() {
	{{ $.ReceiverName }}.is{{ pascalize .Name }}FieldSet = true
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Flag{{ pascalize .Name}}Unset() {
	{{ $.ReceiverName }}.is{{ pascalize .Name }}FieldSet = false
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Flag{{ pascalize .Name}}Nil() {
	if is{{ pascalize $.Name }}_Field{{ pascalize .Name }}Nullable {
		{{ $.ReceiverName }}.is{{ pascalize .Name}}FieldNil = true
	}
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Flag{{ pascalize .Name}}Zero() {
	if is{{ pascalize $.Name }}_Field{{ pascalize .Name }}Nullable {
		{{ $.ReceiverName }}.is{{ pascalize .Name}}FieldNil = false
	}
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Is{{ pascalize .Name}}Nil() bool {
	return is{{ pascalize $.Name }}_Field{{ pascalize .Name }}Nullable && {{ $.ReceiverName }}.is{{ pascalize .Name}}FieldNil
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Is{{ pascalize .Name}}Set() bool {
	return {{ $.ReceiverName }}.is{{ pascalize .Name}}FieldSet || !swag.IsZero({{ .ValueExpression }})
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Has{{ pascalize .Name}}Value() bool {
	return {{ $.ReceiverName }}.Is{{ pascalize .Name }}Set() && !{{ $.ReceiverName }}.Is{{ pascalize .Name}}Nil()
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Set{{ pascalize .Name}}(value {{ template "schemaType" . }}) {
	{{ $.ReceiverName }}.Flag{{ pascalize .Name}}Set()
  {{ if .IsNullable }}if value == nil {
    {{ $.ReceiverName }}.Flag{{ pascalize .Name}}Nil()
		{{ $.ReceiverName }}.{{ pascalize .Name}} = {{ if .IsNullable }}nil{{ else }}{{ .Zero }}{{ end }}
		return
	}
	{{ end }}{{ $.ReceiverName }}.{{ pascalize .Name}} = {{ if .IsNullable }}*{{ end }}value
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Clear{{ pascalize .Name}}() {
	{{ $.ReceiverName }}.Flag{{ pascalize .Name}}Nil()
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Get{{ pascalize .Name}}() (value {{ template "schemaType" . }}, null bool, haskey bool) {
	return {{ .ValueExpression }}, {{ $.ReceiverName }}.Is{{ pascalize .Name }}Nil(), {{ $.ReceiverName }}.Is{{ pascalize .Name }}Set()
}

func ({{ $.ReceiverName }} *{{ pascalize $.Name }}) Get{{ pascalize .Name}}Ptr() *{{ template "dereffedSchemaType" . }} {
	if !{{ $.ReceiverName }}.Has{{ pascalize .Name}}Value() {
		return nil
	}
	return &{{ $.ReceiverName }}.{{ pascalize .Name}}
}
{{ end }}{{ end }}{{ end }}
